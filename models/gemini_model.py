import google.generativeai as genai
from typing import Dict, List
import yaml
import sys
import os

# Intent classifier'ƒ± import et
sys.path.append(os.path.dirname(os.path.dirname(os.path.abspath(__file__))))
from utils.intent_classifier import IntentClassifier

class HealthChatbot:
    def __init__(self):
        # Config dosyasƒ±nƒ± oku
        with open('config/config.yaml', 'r', encoding='utf-8') as file:
            config = yaml.safe_load(file)
            
        # Gemini API'yi yapƒ±landƒ±r
        self.setup_gemini(config['gemini']['api_key'])
        self.conversation_history = []
        
        # Intent classifier'ƒ± ba≈ülat
        self.intent_classifier = IntentClassifier()
        
    def setup_gemini(self, api_key: str):
        """Gemini API yapƒ±landƒ±rmasƒ±"""
        genai.configure(api_key=api_key)
        self.model = genai.GenerativeModel('gemini-1.5-flash')
    
    def get_response(self, user_input: str) -> str:
        """Kullanƒ±cƒ± mesajƒ±na yanƒ±t al"""
        try:
            # Intent classification yap
            intent_result = self.intent_classifier.get_structured_response(user_input)
            intent = intent_result['intent']
            confidence = intent_result['confidence']
            
            print(f"Intent: {intent}, Confidence: {confidence:.2f}")  # Debug i√ßin
            
            # Y√ºksek g√ºvenlik gerektiren intent'ler i√ßin √∂zel yanƒ±tlar
            if intent == "emergency":
                return self._handle_emergency()
            elif intent == "greeting":
                return self._handle_greeting()
            elif intent == "goodbye":
                return self._handle_goodbye()
            elif intent == "rejection":
                return self._handle_rejection(user_input)
            elif confidence > 0.6:  # Y√ºksek g√ºven skorlu intent'ler i√ßin template yanƒ±t
                return self._handle_high_confidence_intent(intent_result)
            else:
                # D√º≈ü√ºk g√ºven skorlu veya bilinmeyen intent'ler i√ßin Gemini'ye sor
                return self._handle_with_gemini(user_input, intent)
                
        except Exception as e:
            return f"√úzg√ºn√ºm, bir hata olu≈ütu: {str(e)}"
    
    def _handle_emergency(self) -> str:
        """Acil durum yanƒ±tƒ±"""
        return ("üö® **ACƒ∞L DURUM ALGANDI** üö®\n\n"
                "L√ºtfen DERHAL a≈üaƒüƒ±daki adƒ±mlarƒ± izleyin:\n"
                "üìû **112'yi hemen arayƒ±n**\n"
                "üè• **En yakƒ±n acil servise gidin**\n"
                "‚è∞ **Zaman kaybetmeyin**\n\n"
                "Bu chatbot tƒ±bbi acil durumlarda yetersizdir. "
                "Profesyonel tƒ±bbi yardƒ±m alƒ±n!")
    
    def _handle_greeting(self) -> str:
        """Selamlama yanƒ±tƒ±"""
        return ("Merhaba! üëã Ben saƒülƒ±k danƒ±≈ümanƒ± chatbot'unuzum.\n\n"
                "Size ≈üu konularda yardƒ±mcƒ± olabilirim:\n"
                "‚Ä¢ Genel saƒülƒ±k tavsiyeleri\n"
                "‚Ä¢ Semptom deƒüerlendirmesi\n"
                "‚Ä¢ Doktor y√∂nlendirmesi\n"
                "‚Ä¢ Saƒülƒ±klƒ± ya≈üam √∂nerileri\n"
                "‚Ä¢ Acil durum y√∂nlendirmesi\n\n"
                "Nasƒ±l yardƒ±mcƒ± olabilirim?")
    
    def _handle_goodbye(self) -> str:
        """Vedala≈üma yanƒ±tƒ±"""
        return ("Ho≈ü√ßakalƒ±n! üëã\n\n"
                "Saƒülƒ±klƒ± g√ºnler dilerim. üåü\n"
                "Tekrar yardƒ±ma ihtiyacƒ±nƒ±z olursa buradayƒ±m.\n\n"
                "**Hatƒ±rlatma:** Ciddi saƒülƒ±k sorunlarƒ±nƒ±z i√ßin mutlaka doktora ba≈üvurun!")
    
    def _handle_rejection(self, user_input: str) -> str:
        """Reddedilmesi gereken talepler i√ßin yanƒ±t"""
        return ("‚ö†Ô∏è **√ñnemli Uyarƒ±**\n\n"
                "√úzg√ºn√ºm, bu konuda size yardƒ±mcƒ± olamam √ß√ºnk√º:\n"
                "‚Ä¢ Tƒ±bbi te≈ühis koyamam\n"
                "‚Ä¢ ƒ∞la√ß re√ßetesi yazamam\n"
                "‚Ä¢ Kesin tedavi √∂neremem\n\n"
                "üè• **L√ºtfen bir saƒülƒ±k kurulu≈üuna ba≈üvurun**\n"
                "üë®‚Äç‚öïÔ∏è Sadece qualified doktorlar bu konularda yardƒ±mcƒ± olabilir.")
    
    def _handle_high_confidence_intent(self, intent_result: Dict) -> str:
        """Y√ºksek g√ºvenlik skorlu intent'ler i√ßin template yanƒ±t"""
        intent = intent_result['intent']
        template = intent_result['template_response']
        structured = intent_result['structured_response']
        
        if template:
            return f"{structured}\n\n{template}"
        else:
            return structured
    
    def _handle_with_gemini(self, user_input: str, detected_intent: str) -> str:
        """Gemini ile yanƒ±t al (intent bilgisi ile zenginle≈ütirilmi≈ü)"""
        # Intent bilgisini prompt'a ekle
        system_prompt = f"""
        Sen bir saƒülƒ±k danƒ±≈ümanƒ± chatbot'usun. 
        
        Kullanƒ±cƒ±nƒ±n mesajƒ± "{detected_intent}" intent'i olarak algƒ±landƒ±.
        
        G√∂revlerin:
        1. Kullanƒ±cƒ±lara nazik ve profesyonel yanƒ±tlar ver
        2. Acil durumlarda 112'ye y√∂nlendir
        3. Asla tƒ±bbi te≈ühis koyma
        4. Genel saƒülƒ±k tavsiyeleri ver
        5. ≈û√ºpheli durumlarda doktora ba≈üvurmalarƒ±nƒ± √∂ner
        6. T√ºrk√ße yanƒ±t ver
        7. Saƒülƒ±k konularƒ± dƒ±≈üƒ±nda yardƒ±m etme
        
        Yanƒ±tƒ±n profesyonel ama sƒ±cak olsun.
        """
        
        # Tam promptu olu≈ütur
        full_prompt = f"{system_prompt}\n\nKullanƒ±cƒ±: {user_input}"
        
        # Yanƒ±t al
        response = self.model.generate_content(full_prompt)
        
        # Yanƒ±tƒ± kaydet ve d√∂nd√ºr
        bot_response = response.text
        self.conversation_history.append({
            "user": user_input,
            "bot": bot_response,
            "intent": detected_intent
        })
        
        return bot_response
    
    def get_conversation_stats(self) -> Dict:
        """Konu≈üma istatistiklerini d√∂nd√ºr"""
        if not self.conversation_history:
            return {"total_messages": 0, "intents": {}}
        
        intents = {}
        for conv in self.conversation_history:
            intent = conv.get('intent', 'unknown')
            intents[intent] = intents.get(intent, 0) + 1
        
        return {
            "total_messages": len(self.conversation_history),
            "intents": intents
        }
